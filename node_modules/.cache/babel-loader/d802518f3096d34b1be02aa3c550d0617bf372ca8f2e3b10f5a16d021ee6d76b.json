{"ast":null,"code":"var _jsxFileName = \"/Users/tequam/Projects/memory-game/src/components/Cards.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Card from './Card';\nimport { shuffledCards } from '../utils/ShuffleArray';\n\n// export type CardType = {\n//   id: number,\n//   color: string,\n//   state: 'flipped' | 'matched' | ''\n// }\n\n// const colors: CardType[] = [\n//   { id: 1, color: 'green', state: '' },\n//   { id: 1, color: 'green', state: '' },\n//   { id: 2, color: 'yellow', state: '' },\n//   { id: 2, color: 'yellow', state: '' },\n//   { id: 3, color: 'red', state: '' },\n//   { id: 3, color: 'red', state: '' },\n//   { id: 4, color: 'orange', state: '' },\n//   { id: 4, color: 'orange', state: '' },\n//   { id: 5, color: 'purple', state: '' },\n//   { id: 5, color: 'purple', state: '' },\n//   { id: 6, color: 'pink', state: '' },\n//   { id: 6, color: 'pink', state: '' },\n//   { id: 7, color: 'brown', state: '' },\n//   { id: 7, color: 'brown', state: '' },\n//   { id: 8, color: 'blue', state: '' },\n//   { id: 8, color: 'blue', state: '' },\n// ]\n\n// const shuffledCards = (): CardType[] => {\n//   return JSON.parse(JSON.stringify(colors)).sort(() => Math.random() - 0.5)\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cards = () => {\n  _s();\n  const [cards, setCards] = useState(shuffledCards);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [score, setScore] = useState(0);\n  const timeout = useRef(null);\n  console.log('cards', cards);\n  const resetGame = () => {\n    setCards(shuffledCards);\n    setFlippedCards([]);\n    setScore(0);\n  };\n  useEffect(() => {\n    resetGame();\n  }, []);\n  useEffect(() => {\n    if (flippedCards.length === 2) {\n      const [firstIndex, secondIndex] = flippedCards;\n      const areCardsEqual = cards[firstIndex].id === cards[secondIndex].id;\n      setTimeout(() => {\n        const newCards = [...cards];\n        if (areCardsEqual) {\n          setScore(prevScore => prevScore + 1);\n          newCards[firstIndex].state = \"matched\";\n          newCards[secondIndex].state = \"matched\";\n        } else {\n          newCards[firstIndex].state = \"\";\n          newCards[secondIndex].state = \"\";\n          setScore(prevScore => prevScore - 1);\n        }\n        setCards(newCards);\n        setFlippedCards([]);\n      }, 2000);\n    }\n  }, [flippedCards, cards]);\n  console.log('flippedcards', flippedCards);\n  const handleCardClick = index => {\n    if (cards[index].state === \"matched\") return;\n    if (flippedCards.length < 2 && cards[index].state !== \"flipped\") {\n      setFlippedCards(prevCards => [...prevCards, index]);\n      setCards(prevCards => {\n        const newCards = [...prevCards];\n        newCards[index].state = \"flipped\";\n        return newCards;\n      });\n    }\n  };\n  const isGameOver = cards.every(card => card.state === \"matched\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        index: index,\n        onClick: handleCardClick\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Game over! Your score is \", score, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(Cards, \"1ezp3VJAR7/4ENlZS2hbfDHxkkM=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Card","shuffledCards","jsxDEV","_jsxDEV","Cards","_s","cards","setCards","flippedCards","setFlippedCards","score","setScore","timeout","console","log","resetGame","length","firstIndex","secondIndex","areCardsEqual","id","setTimeout","newCards","prevScore","state","handleCardClick","index","prevCards","isGameOver","every","card","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["/Users/tequam/Projects/memory-game/src/components/Cards.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport Card from './Card'\nimport { CardType } from '../data/CardData';\nimport { shuffledCards } from '../utils/ShuffleArray';\n\n// export type CardType = {\n//   id: number,\n//   color: string,\n//   state: 'flipped' | 'matched' | ''\n// }\n\n// const colors: CardType[] = [\n//   { id: 1, color: 'green', state: '' },\n//   { id: 1, color: 'green', state: '' },\n//   { id: 2, color: 'yellow', state: '' },\n//   { id: 2, color: 'yellow', state: '' },\n//   { id: 3, color: 'red', state: '' },\n//   { id: 3, color: 'red', state: '' },\n//   { id: 4, color: 'orange', state: '' },\n//   { id: 4, color: 'orange', state: '' },\n//   { id: 5, color: 'purple', state: '' },\n//   { id: 5, color: 'purple', state: '' },\n//   { id: 6, color: 'pink', state: '' },\n//   { id: 6, color: 'pink', state: '' },\n//   { id: 7, color: 'brown', state: '' },\n//   { id: 7, color: 'brown', state: '' },\n//   { id: 8, color: 'blue', state: '' },\n//   { id: 8, color: 'blue', state: '' },\n// ]\n\n// const shuffledCards = (): CardType[] => {\n//   return JSON.parse(JSON.stringify(colors)).sort(() => Math.random() - 0.5)\n// }\n\nconst Cards = () => {\n  const [cards, setCards] = useState<CardType[]>(shuffledCards);\n  const [flippedCards, setFlippedCards] = useState<number[]>([]);\n  const [score, setScore] = useState(0);\n  const timeout = useRef(null);\n\n  console.log('cards', cards)\n\n  const resetGame = () => {\n    setCards(shuffledCards)\n    setFlippedCards([])\n    setScore(0)\n  }\n\n  useEffect(() => {\n    resetGame()\n  },[])\n\n  useEffect(() => {\n    if (flippedCards.length === 2) {\n      const [firstIndex, secondIndex] = flippedCards;\n      const areCardsEqual = cards[firstIndex].id === cards[secondIndex].id;\n\n      setTimeout(() => {\n        const newCards = [...cards];\n\n        if (areCardsEqual) {\n          setScore((prevScore) => prevScore + 1);\n          newCards[firstIndex].state = \"matched\";\n          newCards[secondIndex].state = \"matched\";\n        } else {\n          newCards[firstIndex].state = \"\";\n          newCards[secondIndex].state = \"\";\n          setScore((prevScore) => prevScore -1);\n        }\n\n        setCards(newCards);\n        setFlippedCards([]);\n      }, 2000);\n    }\n  }, [flippedCards, cards]);\n\n  console.log('flippedcards', flippedCards)\n\n  const handleCardClick = (index: number) => {\n    if (cards[index].state === \"matched\") return\n\n    if (flippedCards.length < 2 && cards[index].state !== \"flipped\") {\n      setFlippedCards((prevCards) => [...prevCards, index]);\n      setCards((prevCards) => {\n        const newCards = [...prevCards];\n        newCards[index].state = \"flipped\";\n        return newCards;\n      });\n    }\n  };\n\n  const isGameOver = cards.every((card) => card.state === \"matched\");\n\n  return(\n    <div className=\"game-wrapper\">\n      <div className=\"score\">\n        <button onClick={resetGame}>New Game</button>\n        <h1>Score: {score}</h1>\n      </div>\n\n      <div className='container'>\n        {cards.map((card, index) =>\n          <Card card={card} key={index} index={index} onClick={handleCardClick} />\n        )}\n      </div>\n      {isGameOver && (\n        <div className=\"overlay\">\n          <div className=\"overlay-content\">\n            <p>Game over! Your score is {score}.</p>\n            <button onClick={resetGame}>Play Again</button>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Cards\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}