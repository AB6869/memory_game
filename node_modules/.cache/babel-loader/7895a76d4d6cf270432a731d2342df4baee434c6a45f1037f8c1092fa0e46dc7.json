{"ast":null,"code":"var _jsxFileName = \"/Users/tequam/Projects/memory-game/src/components/Cards.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst colors = [{\n  id: 1,\n  color: 'green',\n  state: 'flipped'\n}, {\n  id: 1,\n  color: 'green',\n  state: 'flipped'\n}, {\n  id: 2,\n  color: 'yellow',\n  state: 'unflipped'\n}, {\n  id: 2,\n  color: 'yellow',\n  state: 'flipped'\n}, {\n  id: 3,\n  color: 'red',\n  state: 'funlipped'\n}, {\n  id: 3,\n  color: 'red',\n  state: 'flipped'\n}, {\n  id: 4,\n  color: 'orange',\n  state: 'flipped'\n}, {\n  id: 4,\n  color: 'orange',\n  state: 'flipped'\n}, {\n  id: 5,\n  color: 'purple',\n  state: 'unflipped'\n}, {\n  id: 5,\n  color: 'purple',\n  state: 'flipped'\n}, {\n  id: 6,\n  color: 'pink',\n  state: 'flipped'\n}, {\n  id: 6,\n  color: 'pink',\n  state: 'flipped'\n}, {\n  id: 7,\n  color: 'brown',\n  state: 'unlipped'\n}, {\n  id: 7,\n  color: 'brown',\n  state: 'unflipped'\n}, {\n  id: 8,\n  color: 'blue',\n  state: 'unflipped'\n}, {\n  id: 8,\n  color: 'blue',\n  state: 'flipped'\n}];\nconst Cards = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [score, setScore] = useState(0);\n  const disabled = useRef(false);\n  const prevIndex = useRef(-1);\n  const [flippedIndices, setFlippedIndices] = useState([]);\n  const generatRandomColors = () => {\n    const shuffledCards = colors.sort(() => Math.random() - 0.5);\n    setCards(shuffledCards);\n    setScore(0);\n  };\n  useEffect(() => {\n    if (flippedIndices.length === 2) {\n      const [firstIndex, secondIndex] = flippedIndices;\n      const areCardsEqual = cards[firstIndex] === cards[secondIndex];\n      setTimeout(() => {\n        if (areCardsEqual) {\n          setScore(prevScore => prevScore + 1);\n          setCards(prevCards => {\n            const newCards = [...prevCards];\n            newCards[firstIndex] = \"\";\n            newCards[secondIndex] = \"\";\n            return newCards;\n          });\n        }\n        setFlippedIndices([]);\n      }, 2000);\n    }\n  }, [flippedIndices, cards]);\n  const handleCardClick = index => {\n    if (flippedIndices.length < 2 && !flippedIndices.includes(index)) {\n      setFlippedIndices(prevIndices => [...prevIndices, index]);\n    }\n  };\n  const isGameOver = cards.every(card => card === \"\");\n  useEffect(() => {\n    if (isGameOver) {\n      alert(`Game over! Your score is ${score}.`);\n      // Lägg till ytterligare logik för att hantera vad som ska hända när spelet är över\n      // T.ex. starta om spelet eller visa en ny spelplan\n    }\n  }, [isGameOver, score]);\n\n  // const handleCardClick = (id: number) => {\n  //   if(disabled.current) return\n  //   console.log('clicked card', id)\n  //   const\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"new-game\",\n      onClick: generatRandomColors,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        onClick: handleCardClick\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Cards, \"HA5aJ8/bVmeAngQ56y3dO+j7qCM=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","colors","id","color","state","Cards","_s","cards","setCards","score","setScore","disabled","prevIndex","flippedIndices","setFlippedIndices","generatRandomColors","shuffledCards","sort","Math","random","length","firstIndex","secondIndex","areCardsEqual","setTimeout","prevScore","prevCards","newCards","handleCardClick","index","includes","prevIndices","isGameOver","every","card","alert","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["/Users/tequam/Projects/memory-game/src/components/Cards.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport Card from './Card'\n\nexport type CardType = {\n  id: number,\n  color: string,\n  state: string,\n}\n\nconst colors: CardType[] = [\n  { id: 1, color: 'green', state: 'flipped' },\n  { id: 1, color: 'green', state: 'flipped' },\n  { id: 2, color: 'yellow', state: 'unflipped' },\n  { id: 2, color: 'yellow', state: 'flipped' },\n  { id: 3, color: 'red', state: 'funlipped' },\n  { id: 3, color: 'red', state: 'flipped' },\n  { id: 4, color: 'orange', state: 'flipped' },\n  { id: 4, color: 'orange', state: 'flipped' },\n  { id: 5, color: 'purple', state: 'unflipped' },\n  { id: 5, color: 'purple', state: 'flipped' },\n  { id: 6, color: 'pink', state: 'flipped' },\n  { id: 6, color: 'pink', state: 'flipped' },\n  { id: 7, color: 'brown', state: 'unlipped' },\n  { id: 7, color: 'brown', state: 'unflipped' },\n  { id: 8, color: 'blue', state: 'unflipped' },\n  { id: 8, color: 'blue', state: 'flipped' },\n]\n\nconst Cards = () => {\n  const [cards, setCards] = useState<Array<CardType>>([])\n  const [score, setScore] = useState<number>(0)\n  const disabled = useRef(false)\n  const prevIndex = useRef(-1)\n  const [flippedIndices, setFlippedIndices] = useState<number[]>([]);\n\n\n  const generatRandomColors = () => {\n    const shuffledCards = colors.sort(() => Math.random() - 0.5)\n    setCards(shuffledCards)\n    setScore(0)\n  }\n\n  useEffect(() => {\n    if (flippedIndices.length === 2) {\n      const [firstIndex, secondIndex] = flippedIndices;\n      const areCardsEqual = cards[firstIndex] === cards[secondIndex];\n\n      setTimeout(() => {\n        if (areCardsEqual) {\n          setScore((prevScore) => prevScore + 1);\n          setCards((prevCards) => {\n            const newCards = [...prevCards];\n            newCards[firstIndex] = \"\";\n            newCards[secondIndex] = \"\";\n            return newCards;\n          });\n        }\n\n        setFlippedIndices([]);\n      }, 2000);\n    }\n  }, [flippedIndices, cards]);\n\n  const handleCardClick = (index: number) => {\n    if (flippedIndices.length < 2 && !flippedIndices.includes(index)) {\n      setFlippedIndices((prevIndices) => [...prevIndices, index]);\n    }\n  };\n\n  const isGameOver = cards.every((card) => card === \"\");\n\n  useEffect(() => {\n    if (isGameOver) {\n      alert(`Game over! Your score is ${score}.`);\n      // Lägg till ytterligare logik för att hantera vad som ska hända när spelet är över\n      // T.ex. starta om spelet eller visa en ny spelplan\n    }\n  }, [isGameOver, score]);\n\n  // const handleCardClick = (id: number) => {\n  //   if(disabled.current) return\n  //   console.log('clicked card', id)\n  //   const\n  // }\n\n  return(\n    <>\n      <button className=\"new-game\" onClick={generatRandomColors}>New Game</button>\n      <div className='container'>\n        {cards.map((card, index) =>\n          <Card card={card} key={index} onClick={handleCardClick} />\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default Cards\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}