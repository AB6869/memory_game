{"ast":null,"code":"var _jsxFileName = \"/Users/tequam/Projects/memory-game/src/components/Cards.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport Card from './Card';\nimport { shuffledCards } from '../utils/ShuffleArray';\nimport Overlay from './Overlay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cards = () => {\n  _s();\n  const [cards, setCards] = useState(shuffledCards);\n  const [score, setScore] = useState(0);\n  const [disabled, setDisabled] = useState(false);\n  const prevIndex = useRef(-1);\n  const resetGame = () => {\n    setCards(shuffledCards);\n    prevIndex.current = -1;\n    setScore(0);\n    setDisabled(false);\n  };\n  const handleCardClick = async index => {\n    const currCard = cards[index];\n    const prevCard = cards[prevIndex.current];\n    if (currCard.state === 'matched' || disabled) return;\n    updateStatus([currCard], 'flipped');\n    if (!prevCard || prevIndex.current === index) {\n      prevIndex.current = index;\n      return;\n    }\n    setDisabled(true);\n    setTimeout(() => {\n      if (currCard.id === prevCard.id) {\n        updateStatus([currCard, prevCard], 'matched');\n        setScore(prevScore => prevScore + 1);\n        setDisabled(false);\n      } else {\n        updateStatus([currCard, prevCard], '');\n        setScore(prevScore => prevScore - 1);\n        setDisabled(false);\n      }\n    }, 2000);\n    prevIndex.current = -1;\n  };\n  const updateStatus = (cards1, state) => {\n    cards1.forEach(card => card.state = state);\n    setCards([...cards]);\n  };\n  const isGameOver = cards.every(card => card.state === 'matched');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        index: index,\n        onClick: handleCardClick\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(Overlay, {\n      onClick: resetGame,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Cards, \"E44LeOxL/0Ib3VGroi/X5vkiEEU=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useRef","useState","Card","shuffledCards","Overlay","jsxDEV","_jsxDEV","Cards","_s","cards","setCards","score","setScore","disabled","setDisabled","prevIndex","resetGame","current","handleCardClick","index","currCard","prevCard","state","updateStatus","setTimeout","id","prevScore","cards1","forEach","card","isGameOver","every","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["/Users/tequam/Projects/memory-game/src/components/Cards.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react'\nimport Card from './Card'\nimport { shuffledCards } from '../utils/ShuffleArray';\nimport { CardType } from '../types/CardType';\nimport Overlay from './Overlay';\n\nconst Cards = () => {\n  const [cards, setCards] = useState<CardType[]>(shuffledCards);\n  const [score, setScore] = useState(0);\n  const [disabled, setDisabled] = useState(false)\n  const prevIndex = useRef(-1)\n\n  const resetGame = () => {\n    setCards(shuffledCards)\n    prevIndex.current = -1\n    setScore(0)\n    setDisabled(false)\n  }\n\n  const handleCardClick = async (index: number) => {\n    const currCard = cards[index];\n    const prevCard = cards[prevIndex.current];\n\n    if (currCard.state === 'matched' || disabled) return;\n\n    updateStatus([currCard], 'flipped');\n\n    if (!prevCard || prevIndex.current === index) {\n      prevIndex.current = index;\n      return;\n    }\n\n      setDisabled(true)\n      setTimeout(() => {\n      if (currCard.id === prevCard.id) {\n        updateStatus([currCard, prevCard], 'matched');\n        setScore((prevScore) => prevScore + 1);\n        setDisabled(false)\n      } else {\n        updateStatus([currCard, prevCard], '')\n        setScore((prevScore) => prevScore - 1);\n        setDisabled(false)\n      }\n    }, 2000)\n\n      prevIndex.current = -1;\n  };\n\n  const updateStatus = (cards1: CardType[], state: 'flipped' | 'matched' | '') =>{\n      cards1.forEach((card) => (card.state = state))\n      setCards([...cards])\n  }\n\n  const isGameOver = cards.every((card) => card.state === 'matched');\n\n  return(\n    <div className=\"game-wrapper\">\n      <div className=\"score\">\n        <button onClick={resetGame}>New Game</button>\n        <h1>Score: {score}</h1>\n      </div>\n\n      <div className='container'>\n        {cards.map((card, index) =>\n          <Card card={card} key={index} index={index} onClick={handleCardClick} />\n        )}\n      </div>\n      {isGameOver && (\n        <Overlay onClick={resetGame} score={score} />\n      )}\n    </div>\n  )\n}\n\nexport default Cards\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}