{"ast":null,"code":"var _jsxFileName = \"/Users/tequam/Projects/memory-game/src/components/Cards.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// const colors: CardType[] = [\n//   { id: 1, color: 'green', state: 'flipped' },\n//   { id: 1, color: 'green', state: 'flipped' },\n//   { id: 2, color: 'yellow', state: 'unflipped' },\n//   { id: 2, color: 'yellow', state: 'flipped' },\n//   { id: 3, color: 'red', state: 'funlipped' },\n//   { id: 3, color: 'red', state: 'flipped' },\n//   { id: 4, color: 'orange', state: 'flipped' },\n//   { id: 4, color: 'orange', state: 'flipped' },\n//   { id: 5, color: 'purple', state: 'unflipped' },\n//   { id: 5, color: 'purple', state: 'flipped' },\n//   { id: 6, color: 'pink', state: 'flipped' },\n//   { id: 6, color: 'pink', state: 'flipped' },\n//   { id: 7, color: 'brown', state: 'unlipped' },\n//   { id: 7, color: 'brown', state: 'unflipped' },\n//   { id: 8, color: 'blue', state: 'unflipped' },\n//   { id: 8, color: 'blue', state: 'flipped' },\n// ]\n\n// Definiera färger som används i spelet\nconst colors = [\"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"purple\", \"pink\", \"brown\"];\n\n// Skapa en array med slumpmässigt blandade färger\nconst generateRandomColors = () => {\n  const allColors = [...colors, ...colors];\n  return allColors.sort(() => Math.random() - 0.5);\n};\nconst Cards = () => {\n  _s();\n  const [cards, setCards] = useState(generateRandomColors());\n  const [score, setScore] = useState(0);\n  const disabled = useRef(false);\n  const prevIndex = useRef(-1);\n  const [flippedIndices, setFlippedIndices] = useState([]);\n\n  // const generatRandomColors = () => {\n  //   const shuffledCards = colors.sort(() => Math.random() - 0.5)\n  //   setCards(shuffledCards)\n  //   setScore(0)\n  // }\n\n  useEffect(() => {\n    if (flippedIndices.length === 2) {\n      const [firstIndex, secondIndex] = flippedIndices;\n      const areCardsEqual = cards[firstIndex] === cards[secondIndex];\n      setTimeout(() => {\n        if (areCardsEqual) {\n          setScore(prevScore => prevScore + 1);\n          setCards(prevCards => {\n            const newCards = [...prevCards];\n            newCards[firstIndex] = \"\";\n            newCards[secondIndex] = \"\";\n            return newCards;\n          });\n        }\n        setFlippedIndices([]);\n      }, 2000);\n    }\n  }, [flippedIndices, cards]);\n  const handleCardClick = index => {\n    if (flippedIndices.length < 2 && !flippedIndices.includes(index)) {\n      setFlippedIndices(prevIndices => [...prevIndices, index]);\n    }\n  };\n  const isGameOver = cards.every(card => card === \"\");\n  useEffect(() => {\n    if (isGameOver) {\n      alert(`Game over! Your score is ${score}.`);\n      // Lägg till ytterligare logik för att hantera vad som ska hända när spelet är över\n      // T.ex. starta om spelet eller visa en ny spelplan\n    }\n  }, [isGameOver, score]);\n\n  // const handleCardClick = (id: number) => {\n  //   if(disabled.current) return\n  //   console.log('clicked card', id)\n  //   const\n  // }\n\n  // return(\n  //   <>\n  //     <button className=\"new-game\" onClick={generatRandomColors}>New Game</button>\n  //     <div className='container'>\n  //       {cards.map((card, index) =>\n  //         <Card card={card} key={index} onClick={handleCardClick} />\n  //       )}\n  //     </div>\n  //   </>\n  // )\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: cards.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card ${color ? \"flipped\" : \"\"}`,\n        onClick: () => handleCardClick(index),\n        children: color && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color\",\n          style: {\n            backgroundColor: color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 23\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(Cards, \"x6Ml95bO0U9wAHfWJtrm020bcnI=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","colors","generateRandomColors","allColors","sort","Math","random","Cards","_s","cards","setCards","score","setScore","disabled","prevIndex","flippedIndices","setFlippedIndices","length","firstIndex","secondIndex","areCardsEqual","setTimeout","prevScore","prevCards","newCards","handleCardClick","index","includes","prevIndices","isGameOver","every","card","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","color","onClick","style","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/tequam/Projects/memory-game/src/components/Cards.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport Card from './Card'\n\nexport type CardType = {\n  id: number,\n  color: string,\n  state: string,\n}\n\n// const colors: CardType[] = [\n//   { id: 1, color: 'green', state: 'flipped' },\n//   { id: 1, color: 'green', state: 'flipped' },\n//   { id: 2, color: 'yellow', state: 'unflipped' },\n//   { id: 2, color: 'yellow', state: 'flipped' },\n//   { id: 3, color: 'red', state: 'funlipped' },\n//   { id: 3, color: 'red', state: 'flipped' },\n//   { id: 4, color: 'orange', state: 'flipped' },\n//   { id: 4, color: 'orange', state: 'flipped' },\n//   { id: 5, color: 'purple', state: 'unflipped' },\n//   { id: 5, color: 'purple', state: 'flipped' },\n//   { id: 6, color: 'pink', state: 'flipped' },\n//   { id: 6, color: 'pink', state: 'flipped' },\n//   { id: 7, color: 'brown', state: 'unlipped' },\n//   { id: 7, color: 'brown', state: 'unflipped' },\n//   { id: 8, color: 'blue', state: 'unflipped' },\n//   { id: 8, color: 'blue', state: 'flipped' },\n// ]\n\n\n// Definiera färger som används i spelet\nconst colors = [\"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"purple\", \"pink\", \"brown\"];\n\n// Skapa en array med slumpmässigt blandade färger\nconst generateRandomColors = () => {\n  const allColors = [...colors, ...colors];\n  return allColors.sort(() => Math.random() - 0.5);\n};\n\nconst Cards = () => {\n  const [cards, setCards] = useState(generateRandomColors())\n  const [score, setScore] = useState<number>(0)\n  const disabled = useRef(false)\n  const prevIndex = useRef(-1)\n  const [flippedIndices, setFlippedIndices] = useState<number[]>([]);\n\n\n  // const generatRandomColors = () => {\n  //   const shuffledCards = colors.sort(() => Math.random() - 0.5)\n  //   setCards(shuffledCards)\n  //   setScore(0)\n  // }\n\n  useEffect(() => {\n    if (flippedIndices.length === 2) {\n      const [firstIndex, secondIndex] = flippedIndices;\n      const areCardsEqual = cards[firstIndex] === cards[secondIndex];\n\n      setTimeout(() => {\n        if (areCardsEqual) {\n          setScore((prevScore) => prevScore + 1);\n          setCards((prevCards) => {\n            const newCards = [...prevCards];\n            newCards[firstIndex] = \"\";\n            newCards[secondIndex] = \"\";\n            return newCards;\n          });\n        }\n\n        setFlippedIndices([]);\n      }, 2000);\n    }\n  }, [flippedIndices, cards]);\n\n  const handleCardClick = (index: number) => {\n    if (flippedIndices.length < 2 && !flippedIndices.includes(index)) {\n      setFlippedIndices((prevIndices) => [...prevIndices, index]);\n    }\n  };\n\n  const isGameOver = cards.every((card) => card === \"\");\n\n  useEffect(() => {\n    if (isGameOver) {\n      alert(`Game over! Your score is ${score}.`);\n      // Lägg till ytterligare logik för att hantera vad som ska hända när spelet är över\n      // T.ex. starta om spelet eller visa en ny spelplan\n    }\n  }, [isGameOver, score]);\n\n  // const handleCardClick = (id: number) => {\n  //   if(disabled.current) return\n  //   console.log('clicked card', id)\n  //   const\n  // }\n\n  // return(\n  //   <>\n  //     <button className=\"new-game\" onClick={generatRandomColors}>New Game</button>\n  //     <div className='container'>\n  //       {cards.map((card, index) =>\n  //         <Card card={card} key={index} onClick={handleCardClick} />\n  //       )}\n  //     </div>\n  //   </>\n  // )\n\n  return (\n    <div>\n      <p>Score: {score}</p>\n      <div className=\"container\">\n        {cards.map((color, index) => (\n          <div\n            key={index}\n            className={`card ${color ? \"flipped\" : \"\"}`}\n            onClick={() => handleCardClick(index)}\n          >\n            {color && <div className=\"color\" style={{ backgroundColor: color }}></div>}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Cards\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAS1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA,MAAMC,MAAM,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC;;AAEtF;AACA,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EACjC,MAAMC,SAAS,GAAG,CAAC,GAAGF,MAAM,EAAE,GAAGA,MAAM,CAAC;EACxC,OAAOE,SAAS,CAACC,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;AAClD,CAAC;AAED,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAACI,oBAAoB,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAS,CAAC,CAAC;EAC7C,MAAMe,QAAQ,GAAGhB,MAAM,CAAC,KAAK,CAAC;EAC9B,MAAMiB,SAAS,GAAGjB,MAAM,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAW,EAAE,CAAC;;EAGlE;EACA;EACA;EACA;EACA;;EAEAF,SAAS,CAAC,MAAM;IACd,IAAImB,cAAc,CAACE,MAAM,KAAK,CAAC,EAAE;MAC/B,MAAM,CAACC,UAAU,EAAEC,WAAW,CAAC,GAAGJ,cAAc;MAChD,MAAMK,aAAa,GAAGX,KAAK,CAACS,UAAU,CAAC,KAAKT,KAAK,CAACU,WAAW,CAAC;MAE9DE,UAAU,CAAC,MAAM;QACf,IAAID,aAAa,EAAE;UACjBR,QAAQ,CAAEU,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;UACtCZ,QAAQ,CAAEa,SAAS,IAAK;YACtB,MAAMC,QAAQ,GAAG,CAAC,GAAGD,SAAS,CAAC;YAC/BC,QAAQ,CAACN,UAAU,CAAC,GAAG,EAAE;YACzBM,QAAQ,CAACL,WAAW,CAAC,GAAG,EAAE;YAC1B,OAAOK,QAAQ;UACjB,CAAC,CAAC;QACJ;QAEAR,iBAAiB,CAAC,EAAE,CAAC;MACvB,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC,EAAE,CAACD,cAAc,EAAEN,KAAK,CAAC,CAAC;EAE3B,MAAMgB,eAAe,GAAIC,KAAa,IAAK;IACzC,IAAIX,cAAc,CAACE,MAAM,GAAG,CAAC,IAAI,CAACF,cAAc,CAACY,QAAQ,CAACD,KAAK,CAAC,EAAE;MAChEV,iBAAiB,CAAEY,WAAW,IAAK,CAAC,GAAGA,WAAW,EAAEF,KAAK,CAAC,CAAC;IAC7D;EACF,CAAC;EAED,MAAMG,UAAU,GAAGpB,KAAK,CAACqB,KAAK,CAAEC,IAAI,IAAKA,IAAI,KAAK,EAAE,CAAC;EAErDnC,SAAS,CAAC,MAAM;IACd,IAAIiC,UAAU,EAAE;MACdG,KAAK,CAAE,4BAA2BrB,KAAM,GAAE,CAAC;MAC3C;MACA;IACF;EACF,CAAC,EAAE,CAACkB,UAAU,EAAElB,KAAK,CAAC,CAAC;;EAEvB;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACEX,OAAA;IAAAiC,QAAA,gBACEjC,OAAA;MAAAiC,QAAA,GAAG,SAAO,EAACtB,KAAK;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBrC,OAAA;MAAKsC,SAAS,EAAC,WAAW;MAAAL,QAAA,EACvBxB,KAAK,CAAC8B,GAAG,CAAC,CAACC,KAAK,EAAEd,KAAK,kBACtB1B,OAAA;QAEEsC,SAAS,EAAG,QAAOE,KAAK,GAAG,SAAS,GAAG,EAAG,EAAE;QAC5CC,OAAO,EAAEA,CAAA,KAAMhB,eAAe,CAACC,KAAK,CAAE;QAAAO,QAAA,EAErCO,KAAK,iBAAIxC,OAAA;UAAKsC,SAAS,EAAC,OAAO;UAACI,KAAK,EAAE;YAAEC,eAAe,EAAEH;UAAM;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC,GAJrEX,KAAK;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKP,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAA7B,EAAA,CApFKD,KAAK;AAAAqC,EAAA,GAALrC,KAAK;AAsFX,eAAeA,KAAK;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}