{"ast":null,"code":"var _jsxFileName = \"/Users/tequam/Projects/memory-game/src/components/Cards.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst colors = [{\n  id: 1,\n  color: 'green',\n  state: ''\n}, {\n  id: 1,\n  color: 'green',\n  state: ''\n}, {\n  id: 2,\n  color: 'yellow',\n  state: ''\n}, {\n  id: 2,\n  color: 'yellow',\n  state: ''\n}, {\n  id: 3,\n  color: 'red',\n  state: ''\n}, {\n  id: 3,\n  color: 'red',\n  state: ''\n}, {\n  id: 4,\n  color: 'orange',\n  state: ''\n}, {\n  id: 4,\n  color: 'orange',\n  state: ''\n}, {\n  id: 5,\n  color: 'purple',\n  state: ''\n}, {\n  id: 5,\n  color: 'purple',\n  state: ''\n}, {\n  id: 6,\n  color: 'pink',\n  state: ''\n}, {\n  id: 6,\n  color: 'pink',\n  state: ''\n}, {\n  id: 7,\n  color: 'brown',\n  state: ''\n}, {\n  id: 7,\n  color: 'brown',\n  state: ''\n}, {\n  id: 8,\n  color: 'blue',\n  state: ''\n}, {\n  id: 8,\n  color: 'blue',\n  state: ''\n}].sort(() => Math.random() - 0.5);\nconst shuffledCards = () => colors;\nconst Cards = () => {\n  _s();\n  const [cards, setCards] = useState(shuffledCards);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [score, setScore] = useState(0);\n  const timeout = useRef(null);\n  const resetGame = () => {\n    setCards(shuffledCards);\n    setFlippedCards([]);\n    setScore(0);\n  };\n  useEffect(() => {\n    resetGame();\n  }, []);\n  console.log('cards', cards);\n  console.log('init', shuffledCards);\n  useEffect(() => {\n    if (flippedCards.length === 2) {\n      const [firstIndex, secondIndex] = flippedCards;\n      const areCardsEqual = cards[firstIndex].id === cards[secondIndex].id;\n      setTimeout(() => {\n        const newCards = [...cards];\n        if (areCardsEqual) {\n          setScore(prevScore => prevScore + 1);\n          newCards[firstIndex].state = \"matched\";\n          newCards[secondIndex].state = \"matched\";\n        } else {\n          newCards[firstIndex].state = \"\";\n          newCards[secondIndex].state = \"\";\n          setScore(prevScore => prevScore - 1);\n        }\n        setCards(newCards);\n        setFlippedCards([]);\n      }, 2000);\n    }\n  }, [flippedCards, cards]);\n  console.log('flippedcards', flippedCards);\n  const handleCardClick = index => {\n    if (cards[index].state === \"matched\") return;\n    if (flippedCards.length < 2 && cards[index].state !== \"flipped\") {\n      setFlippedCards(prevCards => [...prevCards, index]);\n      setCards(prevCards => {\n        const newCards = [...prevCards];\n        newCards[index].state = \"flipped\";\n        return newCards;\n      });\n    }\n  };\n  const isGameOver = cards.every(card => card.state === \"matched\");\n  useEffect(() => {\n    if (isGameOver) {\n      resetGame();\n      // alert(`Game over! Your score is ${score}.`);\n      // Lägg till ytterligare logik för att hantera vad som ska hända när spelet är över\n      // T.ex. starta om spelet eller visa en ny spelplan\n    }\n  }, [isGameOver, score]);\n\n  // Check if both the cards have same type. If they do, mark them inactive\n  // const evaluate = () => {\n  //   const [first, second] = openCards;\n  //   if (cards[first].type === cards[second].type) {\n  //     setClearedCards((prev) => ({ ...prev, [cards[first].type]: true }));\n  //     setOpenCards([]);\n  //     return;\n  //   }\n  //   // Flip cards after a 500ms duration\n  //   timeout.current = setTimeout(() => {\n  //     setOpenCards([]);\n  //   }, 2000);\n  // };\n\n  //const handleCardClick = (id: number) => {\n  // if(disabled.current) return\n  //console.log('clicked card', id)\n  // const prevCard = cards[prevId.current]\n  // if (!prevCard || prevId.current === id) {\n  //   cards.find(card => card.id === id)\n  //   prevId.current = id\n  //   return\n  // }\n  // console.log('prev', prevCard)\n  // If two cards are already open, we cancel timeout set for flipping cards back\n  // clearTimeout(timeout.current);\n  // setOpenCards([index]);\n  //}\n\n  // useEffect(() => {\n  //   if (openCards.length === 2) {\n  //     setTimeout(evaluate, 500);\n  //   }\n  // }, [openCards]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-game-button\",\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        index: index,\n        onClick: handleCardClick\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Cards, \"s7B0dwfGwZ9kBUAVJIwfVCsFhu0=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","colors","id","color","state","sort","Math","random","shuffledCards","Cards","_s","cards","setCards","flippedCards","setFlippedCards","score","setScore","timeout","resetGame","console","log","length","firstIndex","secondIndex","areCardsEqual","setTimeout","newCards","prevScore","handleCardClick","index","prevCards","isGameOver","every","card","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["/Users/tequam/Projects/memory-game/src/components/Cards.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport Card from './Card'\n\nexport type CardType = {\n  id: number,\n  color: string,\n  state: 'flipped' | 'matched' | ''\n}\n\nconst colors: CardType[] = [\n  { id: 1, color: 'green', state: '' },\n  { id: 1, color: 'green', state: '' },\n  { id: 2, color: 'yellow', state: '' },\n  { id: 2, color: 'yellow', state: '' },\n  { id: 3, color: 'red', state: '' },\n  { id: 3, color: 'red', state: '' },\n  { id: 4, color: 'orange', state: '' },\n  { id: 4, color: 'orange', state: '' },\n  { id: 5, color: 'purple', state: '' },\n  { id: 5, color: 'purple', state: '' },\n  { id: 6, color: 'pink', state: '' },\n  { id: 6, color: 'pink', state: '' },\n  { id: 7, color: 'brown', state: '' },\n  { id: 7, color: 'brown', state: '' },\n  { id: 8, color: 'blue', state: '' },\n  { id: 8, color: 'blue', state: '' },\n].sort(() => Math.random() - 0.5)\n\nconst shuffledCards = (): CardType[] => colors\n\nconst Cards = () => {\n  const [cards, setCards] = useState<CardType[]>(shuffledCards);\n  const [flippedCards, setFlippedCards] = useState<number[]>([]);\n  const [score, setScore] = useState(0);\n  const timeout = useRef(null);\n\n  const resetGame = () => {\n    setCards(shuffledCards)\n    setFlippedCards([])\n    setScore(0)\n  }\n\n  useEffect(() => {\n    resetGame()\n  },[])\n\n  console.log('cards', cards)\n  console.log('init', shuffledCards)\n  useEffect(() => {\n    if (flippedCards.length === 2) {\n      const [firstIndex, secondIndex] = flippedCards;\n      const areCardsEqual = cards[firstIndex].id === cards[secondIndex].id;\n\n      setTimeout(() => {\n        const newCards = [...cards];\n\n        if (areCardsEqual) {\n          setScore((prevScore) => prevScore + 1);\n          newCards[firstIndex].state = \"matched\";\n          newCards[secondIndex].state = \"matched\";\n        } else {\n          newCards[firstIndex].state = \"\";\n          newCards[secondIndex].state = \"\";\n          setScore((prevScore) => prevScore -1);\n        }\n\n        setCards(newCards);\n        setFlippedCards([]);\n      }, 2000);\n    }\n  }, [flippedCards, cards]);\n\n  console.log('flippedcards', flippedCards)\n\n  const handleCardClick = (index: number) => {\n    if (cards[index].state === \"matched\") return\n\n    if (flippedCards.length < 2 && cards[index].state !== \"flipped\") {\n      setFlippedCards((prevCards) => [...prevCards, index]);\n      setCards((prevCards) => {\n        const newCards = [...prevCards];\n        newCards[index].state = \"flipped\";\n        return newCards;\n      });\n    }\n  };\n\n  const isGameOver = cards.every((card) => card.state === \"matched\");\n\n  useEffect(() => {\n    if (isGameOver) {\n      resetGame()\n      // alert(`Game over! Your score is ${score}.`);\n      // Lägg till ytterligare logik för att hantera vad som ska hända när spelet är över\n      // T.ex. starta om spelet eller visa en ny spelplan\n    }\n  }, [isGameOver, score]);\n\n    // Check if both the cards have same type. If they do, mark them inactive\n    // const evaluate = () => {\n    //   const [first, second] = openCards;\n    //   if (cards[first].type === cards[second].type) {\n    //     setClearedCards((prev) => ({ ...prev, [cards[first].type]: true }));\n    //     setOpenCards([]);\n    //     return;\n    //   }\n    //   // Flip cards after a 500ms duration\n    //   timeout.current = setTimeout(() => {\n    //     setOpenCards([]);\n    //   }, 2000);\n    // };\n\n  //const handleCardClick = (id: number) => {\n    // if(disabled.current) return\n    //console.log('clicked card', id)\n    // const prevCard = cards[prevId.current]\n    // if (!prevCard || prevId.current === id) {\n    //   cards.find(card => card.id === id)\n    //   prevId.current = id\n    //   return\n    // }\n    // console.log('prev', prevCard)\n          // If two cards are already open, we cancel timeout set for flipping cards back\n          // clearTimeout(timeout.current);\n          // setOpenCards([index]);\n  //}\n\n  // useEffect(() => {\n  //   if (openCards.length === 2) {\n  //     setTimeout(evaluate, 500);\n  //   }\n  // }, [openCards]);\n\n  return(\n    <>\n      <div className=\"score\">\n        <button className=\"new-game-button\" onClick={resetGame}>New Game</button>\n        <p>Score: {score}</p>\n      </div>\n\n      <div className='container'>\n        {cards.map((card, index) =>\n          <Card card={card} key={index} index={index} onClick={handleCardClick} />\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default Cards\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}