{"ast":null,"code":"var _jsxFileName = \"/Users/tequam/Projects/memory-game/src/components/Cards.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst colors = [{\n  id: 1,\n  color: 'green',\n  state: 'flipped'\n}, {\n  id: 1,\n  color: 'green',\n  state: 'flipped'\n}, {\n  id: 2,\n  color: 'yellow',\n  state: 'unflipped'\n}, {\n  id: 2,\n  color: 'yellow',\n  state: 'flipped'\n}, {\n  id: 3,\n  color: 'red',\n  state: 'funlipped'\n}, {\n  id: 3,\n  color: 'red',\n  state: 'flipped'\n}, {\n  id: 4,\n  color: 'orange',\n  state: 'flipped'\n}, {\n  id: 4,\n  color: 'orange',\n  state: 'flipped'\n}, {\n  id: 5,\n  color: 'purple',\n  state: 'unflipped'\n}, {\n  id: 5,\n  color: 'purple',\n  state: 'flipped'\n}, {\n  id: 6,\n  color: 'pink',\n  state: 'flipped'\n}, {\n  id: 6,\n  color: 'pink',\n  state: 'flipped'\n}, {\n  id: 7,\n  color: 'brown',\n  state: 'unlipped'\n}, {\n  id: 7,\n  color: 'brown',\n  state: 'unflipped'\n}, {\n  id: 8,\n  color: 'blue',\n  state: 'unflipped'\n}, {\n  id: 8,\n  color: 'blue',\n  state: 'flipped'\n}];\nconst Cards = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [score, setScore] = useState(0);\n  const disabled = useRef(false);\n  const prevId = useRef(0);\n  const generatRandomColors = () => {\n    const shuffledCards = colors.sort(() => Math.random() - 0.5);\n    setCards(shuffledCards);\n    setScore(0);\n  };\n  const handleCardClick = id => {\n    if (disabled.current) return;\n    console.log('clicked card', id);\n    const prevCard = cards.find(card => card.id === id);\n    if (!prevCard || prevId.current === id) {\n      prevId.current = id;\n      return;\n    }\n    console.log('prev', prevCard);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"new-game\",\n      onClick: generatRandomColors,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        onClick: handleCardClick\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Cards, \"81fBVpfPcoiUScHJ18IHHyaxKzk=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useRef","useState","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","colors","id","color","state","Cards","_s","cards","setCards","score","setScore","disabled","prevId","generatRandomColors","shuffledCards","sort","Math","random","handleCardClick","current","console","log","prevCard","find","card","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","index","_c","$RefreshReg$"],"sources":["/Users/tequam/Projects/memory-game/src/components/Cards.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react'\nimport Card from './Card'\n\nexport type CardType = {\n  id: number,\n  color: string,\n  state: string,\n}\n\nconst colors: CardType[] = [\n  { id: 1, color: 'green', state: 'flipped' },\n  { id: 1, color: 'green', state: 'flipped' },\n  { id: 2, color: 'yellow', state: 'unflipped' },\n  { id: 2, color: 'yellow', state: 'flipped' },\n  { id: 3, color: 'red', state: 'funlipped' },\n  { id: 3, color: 'red', state: 'flipped' },\n  { id: 4, color: 'orange', state: 'flipped' },\n  { id: 4, color: 'orange', state: 'flipped' },\n  { id: 5, color: 'purple', state: 'unflipped' },\n  { id: 5, color: 'purple', state: 'flipped' },\n  { id: 6, color: 'pink', state: 'flipped' },\n  { id: 6, color: 'pink', state: 'flipped' },\n  { id: 7, color: 'brown', state: 'unlipped' },\n  { id: 7, color: 'brown', state: 'unflipped' },\n  { id: 8, color: 'blue', state: 'unflipped' },\n  { id: 8, color: 'blue', state: 'flipped' },\n]\n\nconst Cards = () => {\n  const [cards, setCards] = useState<Array<CardType>>([])\n  const [score, setScore] = useState<number>(0)\n  const disabled = useRef(false)\n  const prevId = useRef(0)\n\n\n  const generatRandomColors = () => {\n    const shuffledCards = colors.sort(() => Math.random() - 0.5)\n    setCards(shuffledCards)\n    setScore(0)\n  }\n\n  const handleCardClick = (id: number) => {\n    if(disabled.current) return\n    console.log('clicked card', id)\n    const prevCard = cards.find(card => card.id === id);\n    if (!prevCard || prevId.current === id) {\n      prevId.current = id\n      return\n    }\n    console.log('prev', prevCard)\n  }\n\n  return(\n    <>\n      <button className=\"new-game\" onClick={generatRandomColors}>New Game</button>\n      <div className='container'>\n        {cards.map((card, index) =>\n          <Card card={card} key={index} onClick={handleCardClick} />\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default Cards\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}