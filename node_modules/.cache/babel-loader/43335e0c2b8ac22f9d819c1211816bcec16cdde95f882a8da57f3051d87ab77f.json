{"ast":null,"code":"var _jsxFileName = \"/Users/tequam/Projects/memory-game/src/components/Cards.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport Card from './Card';\nimport { shuffledCards } from '../utils/ShuffleArray';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cards = () => {\n  _s();\n  const [cards, setCards] = useState(shuffledCards);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [score, setScore] = useState(0);\n  const timeout = useRef(null);\n  const prevIndex = useRef(-1);\n  const resetGame = () => {\n    setCards(shuffledCards);\n    setFlippedCards([]);\n    setScore(0);\n  };\n\n  // useEffect(() => {\n  //   if (flippedCards.length === 2) {\n  //     const [firstIndex, secondIndex] = flippedCards;\n  //     const areCardsEqual = cards[firstIndex].id === cards[secondIndex].id;\n\n  //     setTimeout(() => {\n  //       const newCards = [...cards];\n\n  //       if (areCardsEqual) {\n  //         setScore((prevScore) => prevScore + 1);\n  //         newCards[firstIndex].state = \"matched\";\n  //         newCards[secondIndex].state = \"matched\";\n  //       } else {\n  //         newCards[firstIndex].state = \"\";\n  //         newCards[secondIndex].state = \"\";\n  //         setScore((prevScore) => prevScore -1);\n  //       }\n\n  //       setCards(newCards);\n  //       setFlippedCards([]);\n  //     }, 2000);\n  //   }\n  // }, [flippedCards, cards]);\n\n  // const handleCardClick = (index: number) => {\n  //   if (cards[index].state === \"matched\") return\n\n  //   if (flippedCards.length < 2 && cards[index].state !== \"flipped\") {\n  //     setFlippedCards((prevCards) => [...prevCards, index]);\n  //     setCards((prevCards) => {\n  //       const newCards = [...prevCards];\n  //       newCards[index].state = \"flipped\";\n  //       return newCards;\n  //     });\n  //   }\n  // };\n\n  const updateStatus = index => {\n    const currCard = cards[index];\n    const prevCard = cards[prevIndex.current];\n    setTimeout(() => {\n      const newCards = [...cards];\n      if (currCard.id === prevCard.id) {\n        setScore(prevScore => prevScore + 1);\n        newCards[index].state = \"matched\";\n        newCards[prevIndex.current].state = \"matched\";\n      } else {\n        newCards[index].state = \"\";\n        newCards[prevIndex.current].state = \"\";\n        setScore(prevScore => prevScore - 1);\n      }\n      setCards(newCards);\n      prevIndex.current = -1;\n    }, 2000);\n  };\n  const handleCardClick = index => {\n    const currCard = cards[index];\n    const prevCard = cards[prevIndex.current];\n    currCard.state = \"flipped\";\n    setCards([...cards]);\n    if (!prevCard || prevIndex.current === index) {\n      prevIndex.current = index;\n      return;\n    } else {\n      updateStatus(index);\n    }\n  };\n  //     if (currCard.state === \"matched\") return\n\n  //     if (flippedCards.length < 2 && currCard.state !== \"flipped\") {\n  //       setFlippedCards((prevCards) => [...prevCards, index]);\n  //       setCards((prevCards) => {\n  //         const newCards = [...prevCards];\n  //         newCards[index].state = \"flipped\";\n  //         return newCards;\n  //       });\n  //     }\n  //   };\n\n  const isGameOver = cards.every(card => card.state === \"matched\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        index: index,\n        onClick: handleCardClick\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Game over! Your score is \", score, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(Cards, \"+lAe97owOR+A3FarutmCTiMDzlI=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useRef","useState","Card","shuffledCards","jsxDEV","_jsxDEV","Cards","_s","cards","setCards","flippedCards","setFlippedCards","score","setScore","timeout","prevIndex","resetGame","updateStatus","index","currCard","prevCard","current","setTimeout","newCards","id","prevScore","state","handleCardClick","isGameOver","every","card","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["/Users/tequam/Projects/memory-game/src/components/Cards.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport Card from './Card'\nimport { shuffledCards } from '../utils/ShuffleArray';\nimport { CardType } from '../types/CardType';\n\nconst Cards = () => {\n  const [cards, setCards] = useState<CardType[]>(shuffledCards);\n  const [flippedCards, setFlippedCards] = useState<number[]>([]);\n  const [score, setScore] = useState(0);\n  const timeout = useRef(null);\n  const prevIndex = useRef(-1)\n\n\n  const resetGame = () => {\n    setCards(shuffledCards)\n    setFlippedCards([])\n    setScore(0)\n  }\n\n  // useEffect(() => {\n  //   if (flippedCards.length === 2) {\n  //     const [firstIndex, secondIndex] = flippedCards;\n  //     const areCardsEqual = cards[firstIndex].id === cards[secondIndex].id;\n\n  //     setTimeout(() => {\n  //       const newCards = [...cards];\n\n  //       if (areCardsEqual) {\n  //         setScore((prevScore) => prevScore + 1);\n  //         newCards[firstIndex].state = \"matched\";\n  //         newCards[secondIndex].state = \"matched\";\n  //       } else {\n  //         newCards[firstIndex].state = \"\";\n  //         newCards[secondIndex].state = \"\";\n  //         setScore((prevScore) => prevScore -1);\n  //       }\n\n  //       setCards(newCards);\n  //       setFlippedCards([]);\n  //     }, 2000);\n  //   }\n  // }, [flippedCards, cards]);\n\n  // const handleCardClick = (index: number) => {\n  //   if (cards[index].state === \"matched\") return\n\n  //   if (flippedCards.length < 2 && cards[index].state !== \"flipped\") {\n  //     setFlippedCards((prevCards) => [...prevCards, index]);\n  //     setCards((prevCards) => {\n  //       const newCards = [...prevCards];\n  //       newCards[index].state = \"flipped\";\n  //       return newCards;\n  //     });\n  //   }\n  // };\n\n  const updateStatus = (index: number) =>{\n    const currCard = cards[index]\n    const prevCard = cards[prevIndex.current]\n\n    setTimeout(() => {\n      const newCards = [...cards];\n\n      if(currCard.id === prevCard.id){\n        setScore((prevScore) => prevScore + 1);\n        newCards[index].state = \"matched\"\n        newCards[prevIndex.current].state = \"matched\"\n      }else{\n        newCards[index].state = \"\"\n        newCards[prevIndex.current].state = \"\"\n        setScore((prevScore) => prevScore -1);\n      }\n\n      setCards(newCards);\n      prevIndex.current = -1\n      }, 2000);\n}\n\n  const handleCardClick = (index: number) => {\n    const currCard = cards[index]\n    const prevCard = cards[prevIndex.current]\n\n    currCard.state = \"flipped\"\n    setCards([...cards])\n    if (!prevCard || prevIndex.current === index) {\n      prevIndex.current = index\n      return\n    } else {\n      updateStatus(index)\n    }\n  }\n//     if (currCard.state === \"matched\") return\n\n//     if (flippedCards.length < 2 && currCard.state !== \"flipped\") {\n//       setFlippedCards((prevCards) => [...prevCards, index]);\n//       setCards((prevCards) => {\n//         const newCards = [...prevCards];\n//         newCards[index].state = \"flipped\";\n//         return newCards;\n//       });\n//     }\n//   };\n\n  const isGameOver = cards.every((card) => card.state === \"matched\");\n\n  return(\n    <div className=\"game-wrapper\">\n      <div className=\"score\">\n        <button onClick={resetGame}>New Game</button>\n        <h1>Score: {score}</h1>\n      </div>\n\n      <div className='container'>\n        {cards.map((card, index) =>\n          <Card card={card} key={index} index={index} onClick={handleCardClick} />\n        )}\n      </div>\n      {isGameOver && (\n        <div className=\"overlay\">\n          <div className=\"overlay-content\">\n            <p>Game over! Your score is {score}.</p>\n            <button onClick={resetGame}>Play Again</button>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Cards\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAeC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,aAAa,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGtD,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAaE,aAAa,CAAC;EAC7D,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAW,EAAE,CAAC;EAC9D,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMa,OAAO,GAAGd,MAAM,CAAC,IAAI,CAAC;EAC5B,MAAMe,SAAS,GAAGf,MAAM,CAAC,CAAC,CAAC,CAAC;EAG5B,MAAMgB,SAAS,GAAGA,CAAA,KAAM;IACtBP,QAAQ,CAACN,aAAa,CAAC;IACvBQ,eAAe,CAAC,EAAE,CAAC;IACnBE,QAAQ,CAAC,CAAC,CAAC;EACb,CAAC;;EAED;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMI,YAAY,GAAIC,KAAa,IAAI;IACrC,MAAMC,QAAQ,GAAGX,KAAK,CAACU,KAAK,CAAC;IAC7B,MAAME,QAAQ,GAAGZ,KAAK,CAACO,SAAS,CAACM,OAAO,CAAC;IAEzCC,UAAU,CAAC,MAAM;MACf,MAAMC,QAAQ,GAAG,CAAC,GAAGf,KAAK,CAAC;MAE3B,IAAGW,QAAQ,CAACK,EAAE,KAAKJ,QAAQ,CAACI,EAAE,EAAC;QAC7BX,QAAQ,CAAEY,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;QACtCF,QAAQ,CAACL,KAAK,CAAC,CAACQ,KAAK,GAAG,SAAS;QACjCH,QAAQ,CAACR,SAAS,CAACM,OAAO,CAAC,CAACK,KAAK,GAAG,SAAS;MAC/C,CAAC,MAAI;QACHH,QAAQ,CAACL,KAAK,CAAC,CAACQ,KAAK,GAAG,EAAE;QAC1BH,QAAQ,CAACR,SAAS,CAACM,OAAO,CAAC,CAACK,KAAK,GAAG,EAAE;QACtCb,QAAQ,CAAEY,SAAS,IAAKA,SAAS,GAAE,CAAC,CAAC;MACvC;MAEAhB,QAAQ,CAACc,QAAQ,CAAC;MAClBR,SAAS,CAACM,OAAO,GAAG,CAAC,CAAC;IACtB,CAAC,EAAE,IAAI,CAAC;EACd,CAAC;EAEC,MAAMM,eAAe,GAAIT,KAAa,IAAK;IACzC,MAAMC,QAAQ,GAAGX,KAAK,CAACU,KAAK,CAAC;IAC7B,MAAME,QAAQ,GAAGZ,KAAK,CAACO,SAAS,CAACM,OAAO,CAAC;IAEzCF,QAAQ,CAACO,KAAK,GAAG,SAAS;IAC1BjB,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAAC,CAAC;IACpB,IAAI,CAACY,QAAQ,IAAIL,SAAS,CAACM,OAAO,KAAKH,KAAK,EAAE;MAC5CH,SAAS,CAACM,OAAO,GAAGH,KAAK;MACzB;IACF,CAAC,MAAM;MACLD,YAAY,CAACC,KAAK,CAAC;IACrB;EACF,CAAC;EACH;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE,MAAMU,UAAU,GAAGpB,KAAK,CAACqB,KAAK,CAAEC,IAAI,IAAKA,IAAI,CAACJ,KAAK,KAAK,SAAS,CAAC;EAElE,oBACErB,OAAA;IAAK0B,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3B3B,OAAA;MAAK0B,SAAS,EAAC,OAAO;MAAAC,QAAA,gBACpB3B,OAAA;QAAQ4B,OAAO,EAAEjB,SAAU;QAAAgB,QAAA,EAAC;MAAQ;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC7ChC,OAAA;QAAA2B,QAAA,GAAI,SAAO,EAACpB,KAAK;MAAA;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,eAENhC,OAAA;MAAK0B,SAAS,EAAC,WAAW;MAAAC,QAAA,EACvBxB,KAAK,CAAC8B,GAAG,CAAC,CAACR,IAAI,EAAEZ,KAAK,kBACrBb,OAAA,CAACH,IAAI;QAAC4B,IAAI,EAAEA,IAAK;QAAaZ,KAAK,EAAEA,KAAM;QAACe,OAAO,EAAEN;MAAgB,GAA9CT,KAAK;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA2C,CACzE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EACLT,UAAU,iBACTvB,OAAA;MAAK0B,SAAS,EAAC,SAAS;MAAAC,QAAA,eACtB3B,OAAA;QAAK0B,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B3B,OAAA;UAAA2B,QAAA,GAAG,2BAAyB,EAACpB,KAAK,EAAC,GAAC;QAAA;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACxChC,OAAA;UAAQ4B,OAAO,EAAEjB,SAAU;UAAAgB,QAAA,EAAC;QAAU;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAA9B,EAAA,CA1HKD,KAAK;AAAAiC,EAAA,GAALjC,KAAK;AA4HX,eAAeA,KAAK;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}