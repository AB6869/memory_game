{"ast":null,"code":"var _jsxFileName = \"/Users/tequam/Projects/memory-game/src/components/Cards.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Card from './Card';\nimport Overlay from './Overlay';\nimport styled from 'styled-components';\nimport { Button, Text } from '../styles/globalStyles';\nimport useCards from '../hooks/useCards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cards = () => {\n  _s();\n  const {\n    cards,\n    score,\n    disabled,\n    handleCardClick,\n    resetGame,\n    isGameOver\n  } = useCards();\n  // const [cards, setCards] = useState<CardType[]>(shuffledCards);\n  // const [score, setScore] = useState(0);\n  // const [disabled, setDisabled] = useState(false)\n  // const prevIndex = useRef(-1)\n\n  // const resetGame = () => {\n\n  //   if(disabled) return\n\n  //   setCards(shuffledCards)\n  //   prevIndex.current = -1\n  //   setScore(0)\n  //   setDisabled(false)\n  // }\n\n  // const handleCardClick = (index: number) => {\n  //   const currCard = cards[index];\n  //   const prevCard = cards[prevIndex.current];\n\n  //   if (currCard.state === 'matched' || disabled) return;\n\n  //   updateStatus([currCard], 'flipped');\n\n  //   if (!prevCard || prevIndex.current === index) {\n  //     prevIndex.current = index;\n  //     return;\n  //   }\n\n  //     setDisabled(true)\n  //     setTimeout(() => {\n  //       if (currCard.id === prevCard.id) {\n  //         updateStatus([currCard, prevCard], 'matched');\n  //         setScore((prevScore) => prevScore + 1);\n  //         setDisabled(false)\n  //       } else {\n  //         updateStatus([currCard, prevCard], '')\n  //         setScore((prevScore) => prevScore - 1);\n  //         setDisabled(false)\n  //       }\n  //   }, 2000)\n\n  //     prevIndex.current = -1;\n  // };\n\n  // const updateStatus = (newCards: CardType[], state: 'flipped' | 'matched' | '') =>{\n  //     newCards.forEach((card) => (card.state = state))\n  //     setCards([...cards])\n  // }\n\n  // const isGameOver = cards.every((card) => card.state === 'matched');\n\n  return /*#__PURE__*/_jsxDEV(GameWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(RightSideWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        disabled: disabled,\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardsContainer, {\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        index: index,\n        onClick: handleCardClick\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(Overlay, {\n      onClick: resetGame,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(Cards, \"ZGppk4Df84pRujMod5bfjyKygfQ=\", false, function () {\n  return [useCards];\n});\n_c = Cards;\nconst GameWrapper = styled.div`\n  display: flex;\n`;\n_c2 = GameWrapper;\nconst CardsContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, auto);\n  grid-template-rows: repeat(4, auto);\n  gap: 20px;\n`;\n_c3 = CardsContainer;\nconst RightSideWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  padding-right: 150px;\n`;\n_c4 = RightSideWrapper;\nexport default Cards;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Cards\");\n$RefreshReg$(_c2, \"GameWrapper\");\n$RefreshReg$(_c3, \"CardsContainer\");\n$RefreshReg$(_c4, \"RightSideWrapper\");","map":{"version":3,"names":["React","Card","Overlay","styled","Button","Text","useCards","jsxDEV","_jsxDEV","Cards","_s","cards","score","disabled","handleCardClick","resetGame","isGameOver","GameWrapper","children","RightSideWrapper","onClick","fileName","_jsxFileName","lineNumber","columnNumber","CardsContainer","map","card","index","_c","div","_c2","_c3","_c4","$RefreshReg$"],"sources":["/Users/tequam/Projects/memory-game/src/components/Cards.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react'\nimport Card from './Card'\nimport { shuffledCards } from '../utils/ShuffleArray';\nimport { CardType } from '../types/CardType';\nimport Overlay from './Overlay';\nimport styled from 'styled-components'\nimport { Button, Text } from '../styles/globalStyles';\nimport useCards from '../hooks/useCards';\n\nconst Cards = () => {\n  const { cards, score, disabled, handleCardClick, resetGame, isGameOver } = useCards()\n  // const [cards, setCards] = useState<CardType[]>(shuffledCards);\n  // const [score, setScore] = useState(0);\n  // const [disabled, setDisabled] = useState(false)\n  // const prevIndex = useRef(-1)\n\n  // const resetGame = () => {\n\n  //   if(disabled) return\n\n  //   setCards(shuffledCards)\n  //   prevIndex.current = -1\n  //   setScore(0)\n  //   setDisabled(false)\n  // }\n\n  // const handleCardClick = (index: number) => {\n  //   const currCard = cards[index];\n  //   const prevCard = cards[prevIndex.current];\n\n  //   if (currCard.state === 'matched' || disabled) return;\n\n  //   updateStatus([currCard], 'flipped');\n\n  //   if (!prevCard || prevIndex.current === index) {\n  //     prevIndex.current = index;\n  //     return;\n  //   }\n\n  //     setDisabled(true)\n  //     setTimeout(() => {\n  //       if (currCard.id === prevCard.id) {\n  //         updateStatus([currCard, prevCard], 'matched');\n  //         setScore((prevScore) => prevScore + 1);\n  //         setDisabled(false)\n  //       } else {\n  //         updateStatus([currCard, prevCard], '')\n  //         setScore((prevScore) => prevScore - 1);\n  //         setDisabled(false)\n  //       }\n  //   }, 2000)\n\n  //     prevIndex.current = -1;\n  // };\n\n  // const updateStatus = (newCards: CardType[], state: 'flipped' | 'matched' | '') =>{\n  //     newCards.forEach((card) => (card.state = state))\n  //     setCards([...cards])\n  // }\n\n  // const isGameOver = cards.every((card) => card.state === 'matched');\n\n  return(\n    <GameWrapper>\n      <RightSideWrapper>\n        <Button disabled={disabled} onClick={resetGame}>New Game</Button>\n        <Text>Score: {score}</Text>\n      </RightSideWrapper>\n\n      <CardsContainer>\n        {cards.map((card, index) =>\n          <Card card={card} key={index} index={index} onClick={handleCardClick} />\n        )}\n      </CardsContainer>\n      {isGameOver && (\n        <Overlay onClick={resetGame} score={score} />\n      )}\n    </GameWrapper>\n  )\n}\n\nconst GameWrapper = styled.div`\n  display: flex;\n`\nconst CardsContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, auto);\n  grid-template-rows: repeat(4, auto);\n  gap: 20px;\n`\nconst RightSideWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  padding-right: 150px;\n`\nexport default Cards\n"],"mappings":";;AAAA,OAAOA,KAAK,MAA4B,OAAO;AAC/C,OAAOC,IAAI,MAAM,QAAQ;AAGzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,MAAM,EAAEC,IAAI,QAAQ,wBAAwB;AACrD,OAAOC,QAAQ,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM;IAAEC,KAAK;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,eAAe;IAAEC,SAAS;IAAEC;EAAW,CAAC,GAAGV,QAAQ,CAAC,CAAC;EACrF;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA,oBACEE,OAAA,CAACS,WAAW;IAAAC,QAAA,gBACVV,OAAA,CAACW,gBAAgB;MAAAD,QAAA,gBACfV,OAAA,CAACJ,MAAM;QAACS,QAAQ,EAAEA,QAAS;QAACO,OAAO,EAAEL,SAAU;QAAAG,QAAA,EAAC;MAAQ;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjEhB,OAAA,CAACH,IAAI;QAAAa,QAAA,GAAC,SAAO,EAACN,KAAK;MAAA;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CAAC,eAEnBhB,OAAA,CAACiB,cAAc;MAAAP,QAAA,EACZP,KAAK,CAACe,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrBpB,OAAA,CAACP,IAAI;QAAC0B,IAAI,EAAEA,IAAK;QAAaC,KAAK,EAAEA,KAAM;QAACR,OAAO,EAAEN;MAAgB,GAA9Cc,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA2C,CACzE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACa,CAAC,EAChBR,UAAU,iBACTR,OAAA,CAACN,OAAO;MAACkB,OAAO,EAAEL,SAAU;MAACH,KAAK,EAAEA;IAAM;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC7C;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAElB,CAAC;AAAAd,EAAA,CAtEKD,KAAK;EAAA,QACkEH,QAAQ;AAAA;AAAAuB,EAAA,GAD/EpB,KAAK;AAwEX,MAAMQ,WAAW,GAAGd,MAAM,CAAC2B,GAAI;AAC/B;AACA,CAAC;AAAAC,GAAA,GAFKd,WAAW;AAGjB,MAAMQ,cAAc,GAAGtB,MAAM,CAAC2B,GAAI;AAClC;AACA;AACA;AACA;AACA,CAAC;AAAAE,GAAA,GALKP,cAAc;AAMpB,MAAMN,gBAAgB,GAAGhB,MAAM,CAAC2B,GAAI;AACpC;AACA;AACA;AACA;AACA,CAAC;AAAAG,GAAA,GALKd,gBAAgB;AAMtB,eAAeV,KAAK;AAAA,IAAAoB,EAAA,EAAAE,GAAA,EAAAC,GAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAL,EAAA;AAAAK,YAAA,CAAAH,GAAA;AAAAG,YAAA,CAAAF,GAAA;AAAAE,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}