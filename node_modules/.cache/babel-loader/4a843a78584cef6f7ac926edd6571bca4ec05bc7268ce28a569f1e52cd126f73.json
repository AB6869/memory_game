{"ast":null,"code":"var _jsxFileName = \"/Users/tequam/Projects/memory-game/src/components/Cards.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst colors = [{\n  id: 1,\n  color: 'green',\n  state: 'flipped'\n}, {\n  id: 1,\n  color: 'green',\n  state: 'flipped'\n}, {\n  id: 2,\n  color: 'yellow',\n  state: 'unflipped'\n}, {\n  id: 2,\n  color: 'yellow',\n  state: 'flipped'\n}, {\n  id: 3,\n  color: 'red',\n  state: 'funlipped'\n}, {\n  id: 3,\n  color: 'red',\n  state: 'flipped'\n}, {\n  id: 4,\n  color: 'orange',\n  state: 'flipped'\n}, {\n  id: 4,\n  color: 'orange',\n  state: 'flipped'\n}, {\n  id: 5,\n  color: 'purple',\n  state: 'unflipped'\n}, {\n  id: 5,\n  color: 'purple',\n  state: 'flipped'\n}, {\n  id: 6,\n  color: 'pink',\n  state: 'flipped'\n}, {\n  id: 6,\n  color: 'pink',\n  state: 'flipped'\n}, {\n  id: 7,\n  color: 'brown',\n  state: 'unlipped'\n}, {\n  id: 7,\n  color: 'brown',\n  state: 'unflipped'\n}, {\n  id: 8,\n  color: 'blue',\n  state: 'unflipped'\n}, {\n  id: 8,\n  color: 'blue',\n  state: 'flipped'\n}];\nconst Cards = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [score, setScore] = useState(0);\n  const generatRandomColors = () => {\n    const shuffledCards = colors.sort(() => Math.random() - 0.5);\n    setCards(shuffledCards);\n    setScore(0);\n  };\n  const handleCardClick = id => {\n    console.log('clicked card', id);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"new-game\",\n      onClick: generatRandomColors,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        onClick: handleCardClick\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Cards, \"4n8koNoY9cJxUcEHv6amhAi3z2g=\");\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","useState","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","colors","id","color","state","Cards","_s","cards","setCards","score","setScore","generatRandomColors","shuffledCards","sort","Math","random","handleCardClick","console","log","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","card","index","_c","$RefreshReg$"],"sources":["/Users/tequam/Projects/memory-game/src/components/Cards.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport Card from './Card'\n\nexport type CardType = {\n  id: number,\n  color: string,\n  state: string,\n}\n\nconst colors: CardType[] = [\n  { id: 1, color: 'green', state: 'flipped' },\n  { id: 1, color: 'green', state: 'flipped' },\n  { id: 2, color: 'yellow', state: 'unflipped' },\n  { id: 2, color: 'yellow', state: 'flipped' },\n  { id: 3, color: 'red', state: 'funlipped' },\n  { id: 3, color: 'red', state: 'flipped' },\n  { id: 4, color: 'orange', state: 'flipped' },\n  { id: 4, color: 'orange', state: 'flipped' },\n  { id: 5, color: 'purple', state: 'unflipped' },\n  { id: 5, color: 'purple', state: 'flipped' },\n  { id: 6, color: 'pink', state: 'flipped' },\n  { id: 6, color: 'pink', state: 'flipped' },\n  { id: 7, color: 'brown', state: 'unlipped' },\n  { id: 7, color: 'brown', state: 'unflipped' },\n  { id: 8, color: 'blue', state: 'unflipped' },\n  { id: 8, color: 'blue', state: 'flipped' },\n]\n\nconst Cards = () => {\n  const [cards, setCards] = useState<Array<CardType>>([])\n  const [score, setScore] = useState<number>(0)\n\n  const generatRandomColors = () => {\n    const shuffledCards = colors.sort(() => Math.random() - 0.5)\n    setCards(shuffledCards)\n    setScore(0)\n  }\n\n  const handleCardClick = (id: number) => {\n    console.log('clicked card', id)\n  }\n\n  return(\n    <>\n      <button className=\"new-game\" onClick={generatRandomColors}>New Game</button>\n      <div className='container'>\n        {cards.map((card, index) =>\n          <Card card={card} key={index} onClick={handleCardClick} />\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default Cards\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}