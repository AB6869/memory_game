{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport { shuffledCards } from \"../utils/ShuffleArray\";\nconst useCards = () => {\n  _s();\n  const [cards, setCards] = useState(shuffledCards);\n  const [score, setScore] = useState(0);\n  const [disabled, setDisabled] = useState(false);\n  const prevIndex = useRef(-1);\n  const resetGame = () => {\n    if (disabled) return;\n    setCards(shuffledCards);\n    prevIndex.current = -1;\n    setScore(0);\n    setDisabled(false);\n  };\n  const handleCardClick = index => {\n    const currCard = cards[index];\n    const prevCard = cards[prevIndex.current];\n    if (currCard.state === 'matched' || disabled) return;\n    updateStatus([currCard], 'flipped');\n    if (!prevCard || prevIndex.current === index) {\n      prevIndex.current = index;\n      return;\n    }\n    setDisabled(true);\n    setTimeout(() => {\n      if (currCard.id === prevCard.id) {\n        updateStatus([currCard, prevCard], 'matched');\n        setScore(prevScore => prevScore + 1);\n        setDisabled(false);\n      } else {\n        updateStatus([currCard, prevCard], '');\n        setScore(prevScore => prevScore - 1);\n        setDisabled(false);\n      }\n    }, 2000);\n    prevIndex.current = -1;\n  };\n  const updateStatus = (newCards, state) => {\n    newCards.forEach(card => card.state = state);\n    setCards([...cards]);\n  };\n  const isGameOver = cards.every(card => card.state === 'matched');\n  return {\n    cards,\n    score,\n    disabled,\n    handleCardClick,\n    resetGame,\n    isGameOver\n  };\n};\n_s(useCards, \"E44LeOxL/0Ib3VGroi/X5vkiEEU=\");\nexport default useCards;","map":{"version":3,"names":["useRef","useState","shuffledCards","useCards","_s","cards","setCards","score","setScore","disabled","setDisabled","prevIndex","resetGame","current","handleCardClick","index","currCard","prevCard","state","updateStatus","setTimeout","id","prevScore","newCards","forEach","card","isGameOver","every"],"sources":["/Users/tequam/Projects/memory-game/src/hooks/useCards.ts"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport { CardType } from \"../types/CardType\";\nimport { shuffledCards } from \"../utils/ShuffleArray\";\n\nconst useCards = () => {\n  const [cards, setCards] = useState<CardType[]>(shuffledCards);\n  const [score, setScore] = useState(0);\n  const [disabled, setDisabled] = useState(false)\n  const prevIndex = useRef(-1)\n\n  const resetGame = () => {\n    if(disabled) return\n\n    setCards(shuffledCards)\n    prevIndex.current = -1\n    setScore(0)\n    setDisabled(false)\n  }\n\n  const handleCardClick = (index: number) => {\n    const currCard = cards[index];\n    const prevCard = cards[prevIndex.current];\n\n    if (currCard.state === 'matched' || disabled) return;\n\n    updateStatus([currCard], 'flipped');\n\n    if (!prevCard || prevIndex.current === index) {\n      prevIndex.current = index;\n      return;\n    }\n\n    setDisabled(true)\n    setTimeout(() => {\n      if (currCard.id === prevCard.id) {\n        updateStatus([currCard, prevCard], 'matched');\n        setScore((prevScore) => prevScore + 1);\n        setDisabled(false)\n      } else {\n        updateStatus([currCard, prevCard], '')\n        setScore((prevScore) => prevScore - 1);\n        setDisabled(false)\n      }\n    }, 2000)\n\n      prevIndex.current = -1;\n  };\n\n  const updateStatus = (newCards: CardType[], state: 'flipped' | 'matched' | '') =>{\n      newCards.forEach((card) => (card.state = state))\n      setCards([...cards])\n  }\n\n  const isGameOver = cards.every((card) => card.state === 'matched');\n\n  return {cards, score, disabled, handleCardClick, resetGame, isGameOver}\n}\n\nexport default useCards\n"],"mappings":";AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAExC,SAASC,aAAa,QAAQ,uBAAuB;AAErD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAaC,aAAa,CAAC;EAC7D,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAMU,SAAS,GAAGX,MAAM,CAAC,CAAC,CAAC,CAAC;EAE5B,MAAMY,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAGH,QAAQ,EAAE;IAEbH,QAAQ,CAACJ,aAAa,CAAC;IACvBS,SAAS,CAACE,OAAO,GAAG,CAAC,CAAC;IACtBL,QAAQ,CAAC,CAAC,CAAC;IACXE,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,MAAMI,eAAe,GAAIC,KAAa,IAAK;IACzC,MAAMC,QAAQ,GAAGX,KAAK,CAACU,KAAK,CAAC;IAC7B,MAAME,QAAQ,GAAGZ,KAAK,CAACM,SAAS,CAACE,OAAO,CAAC;IAEzC,IAAIG,QAAQ,CAACE,KAAK,KAAK,SAAS,IAAIT,QAAQ,EAAE;IAE9CU,YAAY,CAAC,CAACH,QAAQ,CAAC,EAAE,SAAS,CAAC;IAEnC,IAAI,CAACC,QAAQ,IAAIN,SAAS,CAACE,OAAO,KAAKE,KAAK,EAAE;MAC5CJ,SAAS,CAACE,OAAO,GAAGE,KAAK;MACzB;IACF;IAEAL,WAAW,CAAC,IAAI,CAAC;IACjBU,UAAU,CAAC,MAAM;MACf,IAAIJ,QAAQ,CAACK,EAAE,KAAKJ,QAAQ,CAACI,EAAE,EAAE;QAC/BF,YAAY,CAAC,CAACH,QAAQ,EAAEC,QAAQ,CAAC,EAAE,SAAS,CAAC;QAC7CT,QAAQ,CAAEc,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;QACtCZ,WAAW,CAAC,KAAK,CAAC;MACpB,CAAC,MAAM;QACLS,YAAY,CAAC,CAACH,QAAQ,EAAEC,QAAQ,CAAC,EAAE,EAAE,CAAC;QACtCT,QAAQ,CAAEc,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;QACtCZ,WAAW,CAAC,KAAK,CAAC;MACpB;IACF,CAAC,EAAE,IAAI,CAAC;IAENC,SAAS,CAACE,OAAO,GAAG,CAAC,CAAC;EAC1B,CAAC;EAED,MAAMM,YAAY,GAAGA,CAACI,QAAoB,EAAEL,KAAiC,KAAI;IAC7EK,QAAQ,CAACC,OAAO,CAAEC,IAAI,IAAMA,IAAI,CAACP,KAAK,GAAGA,KAAM,CAAC;IAChDZ,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAAC,CAAC;EACxB,CAAC;EAED,MAAMqB,UAAU,GAAGrB,KAAK,CAACsB,KAAK,CAAEF,IAAI,IAAKA,IAAI,CAACP,KAAK,KAAK,SAAS,CAAC;EAElE,OAAO;IAACb,KAAK;IAAEE,KAAK;IAAEE,QAAQ;IAAEK,eAAe;IAAEF,SAAS;IAAEc;EAAU,CAAC;AACzE,CAAC;AAAAtB,EAAA,CApDKD,QAAQ;AAsDd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}